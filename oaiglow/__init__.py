#oaiglow flask app

# oaiglow
from localConfig import logging

# modules / packages import
from flask import Flask, render_template, g

# peewee
import peewee

# http://flask.pocoo.org/snippets/35/
class ReverseProxied(object):
	'''Wrap the application in this middleware and configure the 
	front-end server to add these headers, to let you quietly bind 
	this to a URL other than / and to an HTTP scheme that is 
	different than what is used locally.
	In nginx:
	location /myprefix {
		proxy_pass http://192.168.0.1:5001;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Scheme $scheme;
		proxy_set_header X-Script-Name /myprefix;
		}
	:param app: the WSGI application
	'''
	def __init__(self, app, prefix=''):
		self.app = app
		self.prefix = prefix		

	def __call__(self, environ, start_response):
		script_name = environ.get('HTTP_X_SCRIPT_NAME', '')
		if script_name:
			environ['SCRIPT_NAME'] = script_name
			path_info = environ['PATH_INFO']
			if path_info.startswith(script_name):
				environ['PATH_INFO'] = path_info[len(script_name):]

		scheme = environ.get('HTTP_X_SCHEME', '')
		if scheme:
			environ['wsgi.url_scheme'] = scheme
		return self.app(environ, start_response)

# create app
oaiglow_app = Flask(__name__)
oaiglow_app.wsgi_app = ReverseProxied(oaiglow_app.wsgi_app)
oaiglow_app.debug = True



# peewee ORM
db = peewee.SqliteDatabase('oaiglow.db')

# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@oaiglow_app.before_request
def _db_connect():
    db.connect()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@oaiglow_app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()

# get handlers
import oaiglow.views